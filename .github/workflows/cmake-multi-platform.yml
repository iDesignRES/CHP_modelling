# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
 

    - name: Show LastTest.log
      if: always() && runner.os != 'Windows'
      run: |
        echo "=== Contents of LastTest.log ==="
        cat ${{ steps.strings.outputs.build-output-dir }}/Testing/Temporary/LastTest.log || echo "Log file not found"
<<<<<<< HEAD
 
=======

    - name: Install dependencies for doxygen
      if: always() && runner.os != 'Windows'
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get install -y doxygen graphviz

      - name: Set VERSION env variable
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          elif [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            VERSION="${GITHUB_REF#refs/heads/}"
          else
            VERSION="unknown"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate Doxygen docs
        run: |
          mkdir -p build/docs
          sed -i "s|^OUTPUT_DIRECTORY .*|OUTPUT_DIRECTORY = build/docs/${VERSION}|" Doxyfile
          doxygen Doxyfile

      - name: Copy to latest if version is a tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cp -r build/docs/${VERSION} build/docs/latest

      - name: Generate root index.html with version links
        run: |
          mkdir -p build/docs
          echo "<html><body><h1>Documentation Versions</h1><ul>" > build/docs/index.html
          for dir in build/docs/*; do
            if [ -d "$dir" ]; then
              VERSION_NAME=$(basename "$dir")
              echo "<li><a href=\"${VERSION_NAME}/index.html\">${VERSION_NAME}</a></li>" >> build/docs/index.html
            fi
          done
          echo "</ul></body></html>" >> build/docs/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs
          publish_branch: gh-pages
          keep_files: true  # Don't delete previous versions 
      - name: Debug GitHub Ref
        run: echo "GITHUB_REF=${GITHUB_REF}"
>>>>>>> 83fcfafee4b81a8fbd1161e634edbcb32c6b9740
 
